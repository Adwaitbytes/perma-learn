{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nclass Api {\n  METHOD_GET = \"GET\";\n  METHOD_POST = \"POST\";\n  config;\n  constructor(config) {\n    this.applyConfig(config);\n  }\n  applyConfig(config) {\n    this.config = this.mergeDefaults(config);\n  }\n  getConfig() {\n    return this.config;\n  }\n  mergeDefaults(config) {\n    const protocol = config.protocol || \"http\";\n    const port = config.port || (protocol === \"https\" ? 443 : 80);\n    return {\n      host: config.host || \"127.0.0.1\",\n      protocol,\n      port,\n      timeout: config.timeout || 20000,\n      logging: config.logging || false,\n      logger: config.logger || console.log,\n      network: config.network\n    };\n  }\n  async get(endpoint, config) {\n    return await this.request(endpoint, {\n      ...config,\n      method: this.METHOD_GET\n    });\n  }\n  async post(endpoint, body, config) {\n    const headers = new Headers(config?.headers || {});\n    if (!headers.get(\"content-type\")?.includes(\"application/json\")) {\n      headers.append(\"content-type\", \"application/json\");\n    }\n    headers.append(\"accept\", \"application/json, text/plain, */*\");\n    return await this.request(endpoint, {\n      ...config,\n      method: this.METHOD_POST,\n      body: typeof body !== \"string\" ? JSON.stringify(body) : body,\n      headers\n    });\n  }\n  async request(endpoint, init) {\n    const headers = new Headers(init?.headers || {});\n    const baseURL = `${this.config.protocol}://${this.config.host}:${this.config.port}`;\n    /* responseType is purely for backwards compatibility with external apps */\n    const responseType = init?.responseType;\n    delete init?.responseType;\n    if (endpoint.startsWith(\"/\")) {\n      endpoint = endpoint.slice(1);\n    }\n    if (this.config.network) {\n      headers.append(\"x-network\", this.config.network);\n    }\n    if (this.config.logging) {\n      this.config.logger(`Requesting: ${baseURL}/${endpoint}`);\n    }\n    let res = await fetch(`${baseURL}/${endpoint}`, {\n      ...(init || {}),\n      headers\n    });\n    if (this.config.logging) {\n      this.config.logger(`Response:   ${res.url} - ${res.status}`);\n    }\n    const contentType = res.headers.get(\"content-type\");\n    const charset = contentType?.match(/charset=([^()<>@,;:\\\"/[\\]?.=\\s]*)/i)?.[1];\n    const response = res;\n    const decodeText = async () => {\n      if (charset) {\n        try {\n          response.data = new TextDecoder(charset).decode(await res.arrayBuffer());\n        } catch (e) {\n          response.data = await res.text();\n        }\n      } else {\n        response.data = await res.text();\n      }\n    };\n    if (responseType === \"arraybuffer\") {\n      response.data = await res.arrayBuffer();\n    } else if (responseType === \"text\") {\n      await decodeText();\n    } else if (responseType === \"webstream\") {\n      response.data = addAsyncIterator(res.body);\n    } else {\n      /** axios defaults to JSON, and then text, we mimic the behaviour */\n      try {\n        let test = await res.clone().json();\n        if (typeof test !== \"object\") {\n          await decodeText();\n        } else {\n          response.data = await res.json();\n        }\n        test = null;\n      } catch {\n        await decodeText();\n      }\n    }\n    return response;\n  }\n}\nexports.default = Api;\n// | ReadableStream<Uint8Array>\nconst addAsyncIterator = body => {\n  const bodyWithIter = body;\n  if (typeof bodyWithIter[Symbol.asyncIterator] === \"undefined\") {\n    bodyWithIter[Symbol.asyncIterator] = webIiterator(body);\n  }\n  return bodyWithIter;\n};\nconst webIiterator = function (stream) {\n  return async function* iteratorGenerator() {\n    const reader = stream.getReader(); //lock\n    try {\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) return;\n        yield value;\n      }\n    } finally {\n      reader.releaseLock(); //unlock\n    }\n  };\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","Api","METHOD_GET","METHOD_POST","config","constructor","applyConfig","mergeDefaults","getConfig","protocol","port","host","timeout","logging","logger","console","log","network","get","endpoint","request","method","post","body","headers","Headers","includes","append","JSON","stringify","init","baseURL","responseType","startsWith","slice","res","fetch","url","status","contentType","charset","match","response","decodeText","data","TextDecoder","decode","arrayBuffer","e","text","addAsyncIterator","test","clone","json","default","bodyWithIter","Symbol","asyncIterator","webIiterator","stream","iteratorGenerator","reader","getReader","done","read","releaseLock"],"sources":["C:/Users/adwai/perma-learn/frontend/node_modules/arweave/web/lib/api.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Api {\n    METHOD_GET = \"GET\";\n    METHOD_POST = \"POST\";\n    config;\n    constructor(config) {\n        this.applyConfig(config);\n    }\n    applyConfig(config) {\n        this.config = this.mergeDefaults(config);\n    }\n    getConfig() {\n        return this.config;\n    }\n    mergeDefaults(config) {\n        const protocol = config.protocol || \"http\";\n        const port = config.port || (protocol === \"https\" ? 443 : 80);\n        return {\n            host: config.host || \"127.0.0.1\",\n            protocol,\n            port,\n            timeout: config.timeout || 20000,\n            logging: config.logging || false,\n            logger: config.logger || console.log,\n            network: config.network,\n        };\n    }\n    async get(endpoint, config) {\n        return await this.request(endpoint, { ...config, method: this.METHOD_GET });\n    }\n    async post(endpoint, body, config) {\n        const headers = new Headers(config?.headers || {});\n        if (!headers.get(\"content-type\")?.includes(\"application/json\")) {\n            headers.append(\"content-type\", \"application/json\");\n        }\n        headers.append(\"accept\", \"application/json, text/plain, */*\");\n        return await this.request(endpoint, {\n            ...config,\n            method: this.METHOD_POST,\n            body: typeof body !== \"string\" ? JSON.stringify(body) : body,\n            headers,\n        });\n    }\n    async request(endpoint, init) {\n        const headers = new Headers(init?.headers || {});\n        const baseURL = `${this.config.protocol}://${this.config.host}:${this.config.port}`;\n        /* responseType is purely for backwards compatibility with external apps */\n        const responseType = init?.responseType;\n        delete init?.responseType;\n        if (endpoint.startsWith(\"/\")) {\n            endpoint = endpoint.slice(1);\n        }\n        if (this.config.network) {\n            headers.append(\"x-network\", this.config.network);\n        }\n        if (this.config.logging) {\n            this.config.logger(`Requesting: ${baseURL}/${endpoint}`);\n        }\n        let res = await fetch(`${baseURL}/${endpoint}`, {\n            ...(init || {}),\n            headers,\n        });\n        if (this.config.logging) {\n            this.config.logger(`Response:   ${res.url} - ${res.status}`);\n        }\n        const contentType = res.headers.get(\"content-type\");\n        const charset = contentType?.match(/charset=([^()<>@,;:\\\"/[\\]?.=\\s]*)/i)?.[1];\n        const response = res;\n        const decodeText = async () => {\n            if (charset) {\n                try {\n                    response.data = new TextDecoder(charset).decode(await res.arrayBuffer());\n                }\n                catch (e) {\n                    response.data = (await res.text());\n                }\n            }\n            else {\n                response.data = (await res.text());\n            }\n        };\n        if (responseType === \"arraybuffer\") {\n            response.data = (await res.arrayBuffer());\n        }\n        else if (responseType === \"text\") {\n            await decodeText();\n        }\n        else if (responseType === \"webstream\") {\n            response.data = addAsyncIterator(res.body);\n        }\n        else {\n            /** axios defaults to JSON, and then text, we mimic the behaviour */\n            try {\n                let test = await res.clone().json();\n                if (typeof test !== \"object\") {\n                    await decodeText();\n                }\n                else {\n                    response.data = (await res.json());\n                }\n                test = null;\n            }\n            catch {\n                await decodeText();\n            }\n        }\n        return response;\n    }\n}\nexports.default = Api;\n// | ReadableStream<Uint8Array>\nconst addAsyncIterator = (body) => {\n    const bodyWithIter = body;\n    if (typeof bodyWithIter[Symbol.asyncIterator] === \"undefined\") {\n        bodyWithIter[Symbol.asyncIterator] = webIiterator(body);\n    }\n    return bodyWithIter;\n};\nconst webIiterator = function (stream) {\n    return async function* iteratorGenerator() {\n        const reader = stream.getReader(); //lock\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done)\n                    return;\n                yield value;\n            }\n        }\n        finally {\n            reader.releaseLock(); //unlock\n        }\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}