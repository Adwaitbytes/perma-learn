{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst ArweaveUtils = require(\"./lib/utils\");\nrequire(\"arconnect\");\nclass Wallets {\n  api;\n  crypto;\n  constructor(api, crypto) {\n    this.api = api;\n    this.crypto = crypto;\n  }\n  /**\n   * Get the wallet balance for the given address.\n   *\n   * @param {string} address - The arweave address to get the balance for.\n   *\n   * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n   */\n  getBalance(address) {\n    return this.api.get(`wallet/${address}/balance`).then(response => {\n      return response.data;\n    });\n  }\n  /**\n   * Get the last transaction ID for the given wallet address.\n   *\n   * @param {string} address - The arweave address to get the transaction for.\n   *\n   * @returns {Promise<string>} - Promise which resolves with a transaction ID.\n   */\n  getLastTransactionID(address) {\n    return this.api.get(`wallet/${address}/last_tx`).then(response => {\n      return response.data;\n    });\n  }\n  generate() {\n    return this.crypto.generateJWK();\n  }\n  async jwkToAddress(jwk) {\n    if (!jwk || jwk === \"use_wallet\") {\n      return this.getAddress();\n    } else {\n      return this.getAddress(jwk);\n    }\n  }\n  async getAddress(jwk) {\n    if (!jwk || jwk === \"use_wallet\") {\n      try {\n        // @ts-ignore\n        await arweaveWallet.connect([\"ACCESS_ADDRESS\"]);\n      } catch {\n        // Permission is already granted\n      }\n      // @ts-ignore\n      return arweaveWallet.getActiveAddress();\n    } else {\n      return this.ownerToAddress(jwk.n);\n    }\n  }\n  async ownerToAddress(owner) {\n    return ArweaveUtils.bufferTob64Url(await this.crypto.hash(ArweaveUtils.b64UrlToBuffer(owner)));\n  }\n}\nexports.default = Wallets;","map":{"version":3,"names":["Object","defineProperty","exports","value","ArweaveUtils","require","Wallets","api","crypto","constructor","getBalance","address","get","then","response","data","getLastTransactionID","generate","generateJWK","jwkToAddress","jwk","getAddress","arweaveWallet","connect","getActiveAddress","ownerToAddress","n","owner","bufferTob64Url","hash","b64UrlToBuffer","default"],"sources":["C:/Users/adwai/perma-learn/frontend/node_modules/arweave/web/wallets.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ArweaveUtils = require(\"./lib/utils\");\nrequire(\"arconnect\");\nclass Wallets {\n    api;\n    crypto;\n    constructor(api, crypto) {\n        this.api = api;\n        this.crypto = crypto;\n    }\n    /**\n     * Get the wallet balance for the given address.\n     *\n     * @param {string} address - The arweave address to get the balance for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n     */\n    getBalance(address) {\n        return this.api.get(`wallet/${address}/balance`).then((response) => {\n            return response.data;\n        });\n    }\n    /**\n     * Get the last transaction ID for the given wallet address.\n     *\n     * @param {string} address - The arweave address to get the transaction for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a transaction ID.\n     */\n    getLastTransactionID(address) {\n        return this.api.get(`wallet/${address}/last_tx`).then((response) => {\n            return response.data;\n        });\n    }\n    generate() {\n        return this.crypto.generateJWK();\n    }\n    async jwkToAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            return this.getAddress();\n        }\n        else {\n            return this.getAddress(jwk);\n        }\n    }\n    async getAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            try {\n                // @ts-ignore\n                await arweaveWallet.connect([\"ACCESS_ADDRESS\"]);\n            }\n            catch {\n                // Permission is already granted\n            }\n            // @ts-ignore\n            return arweaveWallet.getActiveAddress();\n        }\n        else {\n            return this.ownerToAddress(jwk.n);\n        }\n    }\n    async ownerToAddress(owner) {\n        return ArweaveUtils.bufferTob64Url(await this.crypto.hash(ArweaveUtils.b64UrlToBuffer(owner)));\n    }\n}\nexports.default = Wallets;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,YAAY,GAAGC,OAAO,CAAC,aAAa,CAAC;AAC3CA,OAAO,CAAC,WAAW,CAAC;AACpB,MAAMC,OAAO,CAAC;EACVC,GAAG;EACHC,MAAM;EACNC,WAAWA,CAACF,GAAG,EAAEC,MAAM,EAAE;IACrB,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,UAAUA,CAACC,OAAO,EAAE;IAChB,OAAO,IAAI,CAACJ,GAAG,CAACK,GAAG,CAAC,UAAUD,OAAO,UAAU,CAAC,CAACE,IAAI,CAAEC,QAAQ,IAAK;MAChE,OAAOA,QAAQ,CAACC,IAAI;IACxB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,oBAAoBA,CAACL,OAAO,EAAE;IAC1B,OAAO,IAAI,CAACJ,GAAG,CAACK,GAAG,CAAC,UAAUD,OAAO,UAAU,CAAC,CAACE,IAAI,CAAEC,QAAQ,IAAK;MAChE,OAAOA,QAAQ,CAACC,IAAI;IACxB,CAAC,CAAC;EACN;EACAE,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACT,MAAM,CAACU,WAAW,CAAC,CAAC;EACpC;EACA,MAAMC,YAAYA,CAACC,GAAG,EAAE;IACpB,IAAI,CAACA,GAAG,IAAIA,GAAG,KAAK,YAAY,EAAE;MAC9B,OAAO,IAAI,CAACC,UAAU,CAAC,CAAC;IAC5B,CAAC,MACI;MACD,OAAO,IAAI,CAACA,UAAU,CAACD,GAAG,CAAC;IAC/B;EACJ;EACA,MAAMC,UAAUA,CAACD,GAAG,EAAE;IAClB,IAAI,CAACA,GAAG,IAAIA,GAAG,KAAK,YAAY,EAAE;MAC9B,IAAI;QACA;QACA,MAAME,aAAa,CAACC,OAAO,CAAC,CAAC,gBAAgB,CAAC,CAAC;MACnD,CAAC,CACD,MAAM;QACF;MAAA;MAEJ;MACA,OAAOD,aAAa,CAACE,gBAAgB,CAAC,CAAC;IAC3C,CAAC,MACI;MACD,OAAO,IAAI,CAACC,cAAc,CAACL,GAAG,CAACM,CAAC,CAAC;IACrC;EACJ;EACA,MAAMD,cAAcA,CAACE,KAAK,EAAE;IACxB,OAAOvB,YAAY,CAACwB,cAAc,CAAC,MAAM,IAAI,CAACpB,MAAM,CAACqB,IAAI,CAACzB,YAAY,CAAC0B,cAAc,CAACH,KAAK,CAAC,CAAC,CAAC;EAClG;AACJ;AACAzB,OAAO,CAAC6B,OAAO,GAAGzB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}