{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getError = getError;\nclass ArweaveError extends Error {\n  type;\n  response;\n  constructor(type, optional = {}) {\n    if (optional.message) {\n      super(optional.message);\n    } else {\n      super();\n    }\n    this.type = type;\n    this.response = optional.response;\n  }\n  getType() {\n    return this.type;\n  }\n}\nexports.default = ArweaveError;\n// Safely get error string\n// from a response, falling back to\n// resp.data, statusText or 'unknown'.\n// Note: a wrongly set content-type can\n// cause what is a json response to be interepted\n// as a string or Buffer, so we handle that too.\nfunction getError(resp) {\n  let data = resp.data;\n  if (typeof resp.data === \"string\") {\n    try {\n      data = JSON.parse(resp.data);\n    } catch (e) {}\n  }\n  if (resp.data instanceof ArrayBuffer || resp.data instanceof Uint8Array) {\n    try {\n      data = JSON.parse(data.toString());\n    } catch (e) {}\n  }\n  return data ? data.error || data : resp.statusText || \"unknown\";\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getError","ArweaveError","Error","type","response","constructor","optional","message","getType","default","resp","data","JSON","parse","e","ArrayBuffer","Uint8Array","toString","error","statusText"],"sources":["C:/Users/adwai/perma-learn/frontend/node_modules/arweave/web/lib/error.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getError = getError;\nclass ArweaveError extends Error {\n    type;\n    response;\n    constructor(type, optional = {}) {\n        if (optional.message) {\n            super(optional.message);\n        }\n        else {\n            super();\n        }\n        this.type = type;\n        this.response = optional.response;\n    }\n    getType() {\n        return this.type;\n    }\n}\nexports.default = ArweaveError;\n// Safely get error string\n// from a response, falling back to\n// resp.data, statusText or 'unknown'.\n// Note: a wrongly set content-type can\n// cause what is a json response to be interepted\n// as a string or Buffer, so we handle that too.\nfunction getError(resp) {\n    let data = resp.data;\n    if (typeof resp.data === \"string\") {\n        try {\n            data = JSON.parse(resp.data);\n        }\n        catch (e) { }\n    }\n    if (resp.data instanceof ArrayBuffer || resp.data instanceof Uint8Array) {\n        try {\n            data = JSON.parse(data.toString());\n        }\n        catch (e) { }\n    }\n    return data ? data.error || data : resp.statusText || \"unknown\";\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAGA,QAAQ;AAC3B,MAAMC,YAAY,SAASC,KAAK,CAAC;EAC7BC,IAAI;EACJC,QAAQ;EACRC,WAAWA,CAACF,IAAI,EAAEG,QAAQ,GAAG,CAAC,CAAC,EAAE;IAC7B,IAAIA,QAAQ,CAACC,OAAO,EAAE;MAClB,KAAK,CAACD,QAAQ,CAACC,OAAO,CAAC;IAC3B,CAAC,MACI;MACD,KAAK,CAAC,CAAC;IACX;IACA,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,QAAQ,GAAGE,QAAQ,CAACF,QAAQ;EACrC;EACAI,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACL,IAAI;EACpB;AACJ;AACAL,OAAO,CAACW,OAAO,GAAGR,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,QAAQA,CAACU,IAAI,EAAE;EACpB,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAI;EACpB,IAAI,OAAOD,IAAI,CAACC,IAAI,KAAK,QAAQ,EAAE;IAC/B,IAAI;MACAA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAACC,IAAI,CAAC;IAChC,CAAC,CACD,OAAOG,CAAC,EAAE,CAAE;EAChB;EACA,IAAIJ,IAAI,CAACC,IAAI,YAAYI,WAAW,IAAIL,IAAI,CAACC,IAAI,YAAYK,UAAU,EAAE;IACrE,IAAI;MACAL,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACF,IAAI,CAACM,QAAQ,CAAC,CAAC,CAAC;IACtC,CAAC,CACD,OAAOH,CAAC,EAAE,CAAE;EAChB;EACA,OAAOH,IAAI,GAAGA,IAAI,CAACO,KAAK,IAAIP,IAAI,GAAGD,IAAI,CAACS,UAAU,IAAI,SAAS;AACnE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}