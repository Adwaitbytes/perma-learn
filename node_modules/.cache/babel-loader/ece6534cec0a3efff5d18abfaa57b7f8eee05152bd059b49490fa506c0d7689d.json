{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultConfig = void 0;\n/** exhaustive localhost testing */\nconst isLocal = (protocol, hostname) => {\n  const regexLocalIp = /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/;\n  const split = hostname.split(\".\");\n  const tld = split[split.length - 1]; // check if subdomain on the localhost\n  const localStrings = [\"localhost\", \"[::1]\"];\n  return localStrings.includes(hostname) || protocol == \"file\" || localStrings.includes(tld) || !!hostname.match(regexLocalIp) || !!tld.match(regexLocalIp);\n};\n/** simplified tests for ip addresses */\nconst isIpAdress = host => {\n  // an IPv6 location.hostname (and only IPv6 hostnames) must be surrounded by square brackets\n  const isIpv6 = host.charAt(0) === \"[\";\n  // Potential speed-up for IPv4 detection:\n  // the tld of a domain name cannot be a number (IDN location.hostnames appear to be converted, needs further clarification)\n  const regexMatchIpv4 = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\n  return !!host.match(regexMatchIpv4) || isIpv6;\n};\nconst getDefaultConfig = (protocol, host) => {\n  // If we're running in what looks like a local dev environment\n  // then default to using arweave.net\n  if (isLocal(protocol, host)) {\n    return {\n      protocol: \"https\",\n      host: \"arweave.net\",\n      port: 443\n    };\n  }\n  //check if hostname is an IP address before removing first subdomain\n  if (!isIpAdress(host)) {\n    let split = host.split(\".\");\n    if (split.length >= 3) {\n      split.shift();\n      const parentDomain = split.join(\".\");\n      return {\n        protocol,\n        host: parentDomain\n      };\n    }\n  }\n  // there are 2 potential garbage returns here:\n  // a non-GW ip address & a non-GW hostname without ArNS. garbage in, garbage out.\n  // they should be overridden with user inputs in apiConfig.\n  // otherwise we have a valid ip based GW address.\n  return {\n    protocol,\n    host\n  };\n};\nexports.getDefaultConfig = getDefaultConfig;","map":{"version":3,"names":["Object","defineProperty","exports","value","getDefaultConfig","isLocal","protocol","hostname","regexLocalIp","split","tld","length","localStrings","includes","match","isIpAdress","host","isIpv6","charAt","regexMatchIpv4","port","shift","parentDomain","join"],"sources":["C:/Users/adwai/perma-learn/frontend/node_modules/arweave/web/net-config.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDefaultConfig = void 0;\n/** exhaustive localhost testing */\nconst isLocal = (protocol, hostname) => {\n    const regexLocalIp = /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/;\n    const split = hostname.split(\".\");\n    const tld = split[split.length - 1]; // check if subdomain on the localhost\n    const localStrings = [\"localhost\", \"[::1]\"];\n    return (localStrings.includes(hostname) ||\n        protocol == \"file\" ||\n        localStrings.includes(tld) ||\n        !!hostname.match(regexLocalIp) ||\n        !!tld.match(regexLocalIp));\n};\n/** simplified tests for ip addresses */\nconst isIpAdress = (host) => {\n    // an IPv6 location.hostname (and only IPv6 hostnames) must be surrounded by square brackets\n    const isIpv6 = host.charAt(0) === \"[\";\n    // Potential speed-up for IPv4 detection:\n    // the tld of a domain name cannot be a number (IDN location.hostnames appear to be converted, needs further clarification)\n    const regexMatchIpv4 = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\n    return !!host.match(regexMatchIpv4) || isIpv6;\n};\nconst getDefaultConfig = (protocol, host) => {\n    // If we're running in what looks like a local dev environment\n    // then default to using arweave.net\n    if (isLocal(protocol, host)) {\n        return {\n            protocol: \"https\",\n            host: \"arweave.net\",\n            port: 443,\n        };\n    }\n    //check if hostname is an IP address before removing first subdomain\n    if (!isIpAdress(host)) {\n        let split = host.split(\".\");\n        if (split.length >= 3) {\n            split.shift();\n            const parentDomain = split.join(\".\");\n            return {\n                protocol,\n                host: parentDomain,\n            };\n        }\n    }\n    // there are 2 potential garbage returns here:\n    // a non-GW ip address & a non-GW hostname without ArNS. garbage in, garbage out.\n    // they should be overridden with user inputs in apiConfig.\n    // otherwise we have a valid ip based GW address.\n    return {\n        protocol,\n        host,\n    };\n};\nexports.getDefaultConfig = getDefaultConfig;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC;AACA,MAAMC,OAAO,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EACpC,MAAMC,YAAY,GAAG,wDAAwD;EAC7E,MAAMC,KAAK,GAAGF,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC;EACjC,MAAMC,GAAG,GAAGD,KAAK,CAACA,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMC,YAAY,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC;EAC3C,OAAQA,YAAY,CAACC,QAAQ,CAACN,QAAQ,CAAC,IACnCD,QAAQ,IAAI,MAAM,IAClBM,YAAY,CAACC,QAAQ,CAACH,GAAG,CAAC,IAC1B,CAAC,CAACH,QAAQ,CAACO,KAAK,CAACN,YAAY,CAAC,IAC9B,CAAC,CAACE,GAAG,CAACI,KAAK,CAACN,YAAY,CAAC;AACjC,CAAC;AACD;AACA,MAAMO,UAAU,GAAIC,IAAI,IAAK;EACzB;EACA,MAAMC,MAAM,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;EACrC;EACA;EACA,MAAMC,cAAc,GAAG,2GAA2G;EAClI,OAAO,CAAC,CAACH,IAAI,CAACF,KAAK,CAACK,cAAc,CAAC,IAAIF,MAAM;AACjD,CAAC;AACD,MAAMb,gBAAgB,GAAGA,CAACE,QAAQ,EAAEU,IAAI,KAAK;EACzC;EACA;EACA,IAAIX,OAAO,CAACC,QAAQ,EAAEU,IAAI,CAAC,EAAE;IACzB,OAAO;MACHV,QAAQ,EAAE,OAAO;MACjBU,IAAI,EAAE,aAAa;MACnBI,IAAI,EAAE;IACV,CAAC;EACL;EACA;EACA,IAAI,CAACL,UAAU,CAACC,IAAI,CAAC,EAAE;IACnB,IAAIP,KAAK,GAAGO,IAAI,CAACP,KAAK,CAAC,GAAG,CAAC;IAC3B,IAAIA,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;MACnBF,KAAK,CAACY,KAAK,CAAC,CAAC;MACb,MAAMC,YAAY,GAAGb,KAAK,CAACc,IAAI,CAAC,GAAG,CAAC;MACpC,OAAO;QACHjB,QAAQ;QACRU,IAAI,EAAEM;MACV,CAAC;IACL;EACJ;EACA;EACA;EACA;EACA;EACA,OAAO;IACHhB,QAAQ;IACRU;EACJ,CAAC;AACL,CAAC;AACDd,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}