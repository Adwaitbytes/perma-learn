{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst bignumber_js_1 = require(\"bignumber.js\");\nclass Ar {\n  /**\n   * Method to take a string value and return a bignumber object.\n   *\n   * @protected\n   * @type {Function}\n   * @memberof Arweave\n   */\n  BigNum;\n  constructor() {\n    // Configure and assign the constructor function for the bignumber library.\n    this.BigNum = (value, decimals) => {\n      let instance = bignumber_js_1.BigNumber.clone({\n        DECIMAL_PLACES: decimals\n      });\n      return new instance(value);\n    };\n  }\n  winstonToAr(winstonString, {\n    formatted = false,\n    decimals = 12,\n    trim = true\n  } = {}) {\n    let number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);\n    return formatted ? number.toFormat(decimals) : number.toFixed(decimals);\n  }\n  arToWinston(arString, {\n    formatted = false\n  } = {}) {\n    let number = this.stringToBigNum(arString).shiftedBy(12);\n    return formatted ? number.toFormat() : number.toFixed(0);\n  }\n  compare(winstonStringA, winstonStringB) {\n    let a = this.stringToBigNum(winstonStringA);\n    let b = this.stringToBigNum(winstonStringB);\n    return a.comparedTo(b);\n  }\n  isEqual(winstonStringA, winstonStringB) {\n    return this.compare(winstonStringA, winstonStringB) === 0;\n  }\n  isLessThan(winstonStringA, winstonStringB) {\n    let a = this.stringToBigNum(winstonStringA);\n    let b = this.stringToBigNum(winstonStringB);\n    return a.isLessThan(b);\n  }\n  isGreaterThan(winstonStringA, winstonStringB) {\n    let a = this.stringToBigNum(winstonStringA);\n    let b = this.stringToBigNum(winstonStringB);\n    return a.isGreaterThan(b);\n  }\n  add(winstonStringA, winstonStringB) {\n    let a = this.stringToBigNum(winstonStringA);\n    let b = this.stringToBigNum(winstonStringB);\n    return a.plus(winstonStringB).toFixed(0);\n  }\n  sub(winstonStringA, winstonStringB) {\n    let a = this.stringToBigNum(winstonStringA);\n    let b = this.stringToBigNum(winstonStringB);\n    return a.minus(winstonStringB).toFixed(0);\n  }\n  stringToBigNum(stringValue, decimalPlaces = 12) {\n    return this.BigNum(stringValue, decimalPlaces);\n  }\n}\nexports.default = Ar;","map":{"version":3,"names":["Object","defineProperty","exports","value","bignumber_js_1","require","Ar","BigNum","constructor","decimals","instance","BigNumber","clone","DECIMAL_PLACES","winstonToAr","winstonString","formatted","trim","number","stringToBigNum","shiftedBy","toFormat","toFixed","arToWinston","arString","compare","winstonStringA","winstonStringB","a","b","comparedTo","isEqual","isLessThan","isGreaterThan","add","plus","sub","minus","stringValue","decimalPlaces","default"],"sources":["C:/Users/adwai/perma-learn/frontend/node_modules/arweave/web/ar.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bignumber_js_1 = require(\"bignumber.js\");\nclass Ar {\n    /**\n     * Method to take a string value and return a bignumber object.\n     *\n     * @protected\n     * @type {Function}\n     * @memberof Arweave\n     */\n    BigNum;\n    constructor() {\n        // Configure and assign the constructor function for the bignumber library.\n        this.BigNum = (value, decimals) => {\n            let instance = bignumber_js_1.BigNumber.clone({ DECIMAL_PLACES: decimals });\n            return new instance(value);\n        };\n    }\n    winstonToAr(winstonString, { formatted = false, decimals = 12, trim = true } = {}) {\n        let number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);\n        return formatted ? number.toFormat(decimals) : number.toFixed(decimals);\n    }\n    arToWinston(arString, { formatted = false } = {}) {\n        let number = this.stringToBigNum(arString).shiftedBy(12);\n        return formatted ? number.toFormat() : number.toFixed(0);\n    }\n    compare(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.comparedTo(b);\n    }\n    isEqual(winstonStringA, winstonStringB) {\n        return this.compare(winstonStringA, winstonStringB) === 0;\n    }\n    isLessThan(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.isLessThan(b);\n    }\n    isGreaterThan(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.isGreaterThan(b);\n    }\n    add(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.plus(winstonStringB).toFixed(0);\n    }\n    sub(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.minus(winstonStringB).toFixed(0);\n    }\n    stringToBigNum(stringValue, decimalPlaces = 12) {\n        return this.BigNum(stringValue, decimalPlaces);\n    }\n}\nexports.default = Ar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}