{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst ArweaveUtils = require(\"../utils\");\nclass WebCryptoDriver {\n  keyLength = 4096;\n  publicExponent = 0x10001;\n  hashAlgorithm = \"sha256\";\n  driver;\n  constructor() {\n    if (!this.detectWebCrypto()) {\n      throw new Error(\"SubtleCrypto not available!\");\n    }\n    this.driver = crypto.subtle;\n  }\n  async generateJWK() {\n    let cryptoKey = await this.driver.generateKey({\n      name: \"RSA-PSS\",\n      modulusLength: 4096,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, true, [\"sign\"]);\n    let jwk = await this.driver.exportKey(\"jwk\", cryptoKey.privateKey);\n    return {\n      kty: jwk.kty,\n      e: jwk.e,\n      n: jwk.n,\n      d: jwk.d,\n      p: jwk.p,\n      q: jwk.q,\n      dp: jwk.dp,\n      dq: jwk.dq,\n      qi: jwk.qi\n    };\n  }\n  async sign(jwk, data, {\n    saltLength\n  } = {}) {\n    let signature = await this.driver.sign({\n      name: \"RSA-PSS\",\n      saltLength: saltLength ?? 32\n    }, await this.jwkToCryptoKey(jwk), data);\n    return new Uint8Array(signature);\n  }\n  async hash(data, algorithm = \"SHA-256\") {\n    let digest = await this.driver.digest(algorithm, data);\n    return new Uint8Array(digest);\n  }\n  async verify(publicModulus, data, signature) {\n    const publicKey = {\n      kty: \"RSA\",\n      e: \"AQAB\",\n      n: publicModulus\n    };\n    const key = await this.jwkToPublicCryptoKey(publicKey);\n    const digest = await this.driver.digest(\"SHA-256\", data);\n    const salt0 = await this.driver.verify({\n      name: \"RSA-PSS\",\n      saltLength: 0\n    }, key, signature, data);\n    const salt32 = await this.driver.verify({\n      name: \"RSA-PSS\",\n      saltLength: 32\n    }, key, signature, data);\n    // saltN's salt-length is derived from a formula described here\n    // https://developer.mozilla.org/en-US/docs/Web/API/RsaPssParams\n    const saltLengthN = Math.ceil((key.algorithm.modulusLength - 1) / 8) - digest.byteLength - 2;\n    const saltN = await this.driver.verify({\n      name: \"RSA-PSS\",\n      saltLength: saltLengthN\n    }, key, signature, data);\n    const result = salt0 || salt32 || saltN;\n    if (!result) {\n      const details = {\n        algorithm: key.algorithm.name,\n        modulusLength: key.algorithm.modulusLength,\n        keyUsages: key.usages,\n        saltLengthsAttempted: `0, 32, ${saltLengthN}`\n      };\n      console.warn(\"Transaction Verification Failed! \\n\", `Details: ${JSON.stringify(details, null, 2)} \\n`, \"N.B. ArweaveJS is only guaranteed to verify txs created using ArweaveJS.\");\n    }\n    return result;\n  }\n  async jwkToCryptoKey(jwk) {\n    return this.driver.importKey(\"jwk\", jwk, {\n      name: \"RSA-PSS\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, false, [\"sign\"]);\n  }\n  async jwkToPublicCryptoKey(publicJwk) {\n    return this.driver.importKey(\"jwk\", publicJwk, {\n      name: \"RSA-PSS\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, false, [\"verify\"]);\n  }\n  detectWebCrypto() {\n    if (typeof crypto === \"undefined\") {\n      return false;\n    }\n    const subtle = crypto?.subtle;\n    if (subtle === undefined) {\n      return false;\n    }\n    const names = [\"generateKey\", \"importKey\", \"exportKey\", \"digest\", \"sign\"];\n    return names.every(name => typeof subtle[name] === \"function\");\n  }\n  async encrypt(data, key, salt) {\n    const initialKey = await this.driver.importKey(\"raw\", typeof key == \"string\" ? ArweaveUtils.stringToBuffer(key) : key, {\n      name: \"PBKDF2\",\n      length: 32\n    }, false, [\"deriveKey\"]);\n    // const salt = ArweaveUtils.stringToBuffer(\"salt\");\n    // create a random string for deriving the key\n    // const salt = this.driver.randomBytes(16).toString('hex');\n    const derivedkey = await this.driver.deriveKey({\n      name: \"PBKDF2\",\n      salt: salt ? ArweaveUtils.stringToBuffer(salt) : ArweaveUtils.stringToBuffer(\"salt\"),\n      iterations: 100000,\n      hash: \"SHA-256\"\n    }, initialKey, {\n      name: \"AES-CBC\",\n      length: 256\n    }, false, [\"encrypt\", \"decrypt\"]);\n    const iv = new Uint8Array(16);\n    crypto.getRandomValues(iv);\n    const encryptedData = await this.driver.encrypt({\n      name: \"AES-CBC\",\n      iv: iv\n    }, derivedkey, data);\n    return ArweaveUtils.concatBuffers([iv, encryptedData]);\n  }\n  async decrypt(encrypted, key, salt) {\n    const initialKey = await this.driver.importKey(\"raw\", typeof key == \"string\" ? ArweaveUtils.stringToBuffer(key) : key, {\n      name: \"PBKDF2\",\n      length: 32\n    }, false, [\"deriveKey\"]);\n    // const salt = ArweaveUtils.stringToBuffer(\"pepper\");\n    const derivedkey = await this.driver.deriveKey({\n      name: \"PBKDF2\",\n      salt: salt ? ArweaveUtils.stringToBuffer(salt) : ArweaveUtils.stringToBuffer(\"salt\"),\n      iterations: 100000,\n      hash: \"SHA-256\"\n    }, initialKey, {\n      name: \"AES-CBC\",\n      length: 256\n    }, false, [\"encrypt\", \"decrypt\"]);\n    const iv = encrypted.slice(0, 16);\n    const data = await this.driver.decrypt({\n      name: \"AES-CBC\",\n      iv: iv\n    }, derivedkey, encrypted.slice(16));\n    // We're just using concat to convert from an array buffer to uint8array\n    return ArweaveUtils.concatBuffers([data]);\n  }\n}\nexports.default = WebCryptoDriver;","map":{"version":3,"names":["Object","defineProperty","exports","value","ArweaveUtils","require","WebCryptoDriver","keyLength","publicExponent","hashAlgorithm","driver","constructor","detectWebCrypto","Error","crypto","subtle","generateJWK","cryptoKey","generateKey","name","modulusLength","Uint8Array","hash","jwk","exportKey","privateKey","kty","e","n","d","p","q","dp","dq","qi","sign","data","saltLength","signature","jwkToCryptoKey","algorithm","digest","verify","publicModulus","publicKey","key","jwkToPublicCryptoKey","salt0","salt32","saltLengthN","Math","ceil","byteLength","saltN","result","details","keyUsages","usages","saltLengthsAttempted","console","warn","JSON","stringify","importKey","publicJwk","undefined","names","every","encrypt","salt","initialKey","stringToBuffer","length","derivedkey","deriveKey","iterations","iv","getRandomValues","encryptedData","concatBuffers","decrypt","encrypted","slice","default"],"sources":["C:/Users/adwai/perma-learn/frontend/node_modules/arweave/web/lib/crypto/webcrypto-driver.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ArweaveUtils = require(\"../utils\");\nclass WebCryptoDriver {\n    keyLength = 4096;\n    publicExponent = 0x10001;\n    hashAlgorithm = \"sha256\";\n    driver;\n    constructor() {\n        if (!this.detectWebCrypto()) {\n            throw new Error(\"SubtleCrypto not available!\");\n        }\n        this.driver = crypto.subtle;\n    }\n    async generateJWK() {\n        let cryptoKey = await this.driver.generateKey({\n            name: \"RSA-PSS\",\n            modulusLength: 4096,\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            hash: {\n                name: \"SHA-256\",\n            },\n        }, true, [\"sign\"]);\n        let jwk = await this.driver.exportKey(\"jwk\", cryptoKey.privateKey);\n        return {\n            kty: jwk.kty,\n            e: jwk.e,\n            n: jwk.n,\n            d: jwk.d,\n            p: jwk.p,\n            q: jwk.q,\n            dp: jwk.dp,\n            dq: jwk.dq,\n            qi: jwk.qi,\n        };\n    }\n    async sign(jwk, data, { saltLength } = {}) {\n        let signature = await this.driver.sign({\n            name: \"RSA-PSS\",\n            saltLength: saltLength ?? 32,\n        }, await this.jwkToCryptoKey(jwk), data);\n        return new Uint8Array(signature);\n    }\n    async hash(data, algorithm = \"SHA-256\") {\n        let digest = await this.driver.digest(algorithm, data);\n        return new Uint8Array(digest);\n    }\n    async verify(publicModulus, data, signature) {\n        const publicKey = {\n            kty: \"RSA\",\n            e: \"AQAB\",\n            n: publicModulus,\n        };\n        const key = await this.jwkToPublicCryptoKey(publicKey);\n        const digest = await this.driver.digest(\"SHA-256\", data);\n        const salt0 = await this.driver.verify({\n            name: \"RSA-PSS\",\n            saltLength: 0,\n        }, key, signature, data);\n        const salt32 = await this.driver.verify({\n            name: \"RSA-PSS\",\n            saltLength: 32,\n        }, key, signature, data);\n        // saltN's salt-length is derived from a formula described here\n        // https://developer.mozilla.org/en-US/docs/Web/API/RsaPssParams\n        const saltLengthN = Math.ceil((key.algorithm.modulusLength - 1) / 8) -\n            digest.byteLength -\n            2;\n        const saltN = await this.driver.verify({\n            name: \"RSA-PSS\",\n            saltLength: saltLengthN,\n        }, key, signature, data);\n        const result = salt0 || salt32 || saltN;\n        if (!result) {\n            const details = {\n                algorithm: key.algorithm.name,\n                modulusLength: key.algorithm.modulusLength,\n                keyUsages: key.usages,\n                saltLengthsAttempted: `0, 32, ${saltLengthN}`,\n            };\n            console.warn(\"Transaction Verification Failed! \\n\", `Details: ${JSON.stringify(details, null, 2)} \\n`, \"N.B. ArweaveJS is only guaranteed to verify txs created using ArweaveJS.\");\n        }\n        return result;\n    }\n    async jwkToCryptoKey(jwk) {\n        return this.driver.importKey(\"jwk\", jwk, {\n            name: \"RSA-PSS\",\n            hash: {\n                name: \"SHA-256\",\n            },\n        }, false, [\"sign\"]);\n    }\n    async jwkToPublicCryptoKey(publicJwk) {\n        return this.driver.importKey(\"jwk\", publicJwk, {\n            name: \"RSA-PSS\",\n            hash: {\n                name: \"SHA-256\",\n            },\n        }, false, [\"verify\"]);\n    }\n    detectWebCrypto() {\n        if (typeof crypto === \"undefined\") {\n            return false;\n        }\n        const subtle = crypto?.subtle;\n        if (subtle === undefined) {\n            return false;\n        }\n        const names = [\n            \"generateKey\",\n            \"importKey\",\n            \"exportKey\",\n            \"digest\",\n            \"sign\",\n        ];\n        return names.every((name) => typeof subtle[name] === \"function\");\n    }\n    async encrypt(data, key, salt) {\n        const initialKey = await this.driver.importKey(\"raw\", typeof key == \"string\" ? ArweaveUtils.stringToBuffer(key) : key, {\n            name: \"PBKDF2\",\n            length: 32,\n        }, false, [\"deriveKey\"]);\n        // const salt = ArweaveUtils.stringToBuffer(\"salt\");\n        // create a random string for deriving the key\n        // const salt = this.driver.randomBytes(16).toString('hex');\n        const derivedkey = await this.driver.deriveKey({\n            name: \"PBKDF2\",\n            salt: salt\n                ? ArweaveUtils.stringToBuffer(salt)\n                : ArweaveUtils.stringToBuffer(\"salt\"),\n            iterations: 100000,\n            hash: \"SHA-256\",\n        }, initialKey, {\n            name: \"AES-CBC\",\n            length: 256,\n        }, false, [\"encrypt\", \"decrypt\"]);\n        const iv = new Uint8Array(16);\n        crypto.getRandomValues(iv);\n        const encryptedData = await this.driver.encrypt({\n            name: \"AES-CBC\",\n            iv: iv,\n        }, derivedkey, data);\n        return ArweaveUtils.concatBuffers([iv, encryptedData]);\n    }\n    async decrypt(encrypted, key, salt) {\n        const initialKey = await this.driver.importKey(\"raw\", typeof key == \"string\" ? ArweaveUtils.stringToBuffer(key) : key, {\n            name: \"PBKDF2\",\n            length: 32,\n        }, false, [\"deriveKey\"]);\n        // const salt = ArweaveUtils.stringToBuffer(\"pepper\");\n        const derivedkey = await this.driver.deriveKey({\n            name: \"PBKDF2\",\n            salt: salt\n                ? ArweaveUtils.stringToBuffer(salt)\n                : ArweaveUtils.stringToBuffer(\"salt\"),\n            iterations: 100000,\n            hash: \"SHA-256\",\n        }, initialKey, {\n            name: \"AES-CBC\",\n            length: 256,\n        }, false, [\"encrypt\", \"decrypt\"]);\n        const iv = encrypted.slice(0, 16);\n        const data = await this.driver.decrypt({\n            name: \"AES-CBC\",\n            iv: iv,\n        }, derivedkey, encrypted.slice(16));\n        // We're just using concat to convert from an array buffer to uint8array\n        return ArweaveUtils.concatBuffers([data]);\n    }\n}\nexports.default = WebCryptoDriver;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}